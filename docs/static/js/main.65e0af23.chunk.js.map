{"version":3,"sources":["components/Error.jsx","components/Question.jsx","components/Form.jsx","components/Expense.jsx","components/ExpenseList.jsx","helper/changeClass.js","components/BudgetControl.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Error","msg","className","Question","setBudget","setRemaining","setShowQuestion","useState","quantity","setQuantity","error","setError","console","log","onSubmit","e","preventDefault","isNaN","type","name","placeholder","onChange","target","parseInt","value","Form","setExpense","setAddExpense","setName","trim","expense","id","shortid","generate","Expense","ExpenseList","expenses","map","key","reviewBudget","budget","remaining","BudgetControl","App","showQuestion","setExpenses","addExpense","useEffect","prevState","remainingBudget","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.65e0af23.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction Error({ msg }) {\n  return <p className=\"alert alert-danger error\">{msg}</p>\n}\n\nError.propTypes = {\n  msg: PropTypes.string.isRequired,\n}\n\nexport default Error\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport Error from './Error'\n\nfunction Question({ setBudget, setRemaining, setShowQuestion }) {\n  const [quantity, setQuantity] = useState(0)\n  const [error, setError] = useState(false)\n\n  const handleChange = ({ target }) => {\n    setQuantity(parseInt(target.value))\n  }\n  const handleSubmit = e => {\n    e.preventDefault()\n\n    if (quantity < 1 || isNaN(quantity)) return setError(true)\n\n    setError(false)\n    setBudget(quantity)\n    setRemaining(quantity)\n    setShowQuestion(false)\n  }\n\n  console.log(quantity)\n\n  return (\n    <>\n      <h2>Put your budget</h2>\n\n      {error && <Error msg=\"You must write a valid budget\" />}\n\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"number\"\n          name=\"budget\"\n          className=\"u-full-width\"\n          placeholder=\"Write your budget\"\n          onChange={handleChange}\n        />\n\n        <input\n          type=\"submit\"\n          className=\"button-primary u-full-width\"\n          value=\"Set your budget\"\n        />\n      </form>\n    </>\n  )\n}\n\nQuestion.propTypes = {\n  setBudget: PropTypes.func.isRequired,\n  setRemaining: PropTypes.func.isRequired,\n  setShowQuestion: PropTypes.func.isRequired,\n}\n\nexport default Question\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport shortid from 'shortid'\n\nimport Error from './Error'\n\nfunction Form({ setExpense, setAddExpense }) {\n  const [name, setName] = useState('')\n  const [quantity, setQuantity] = useState(0)\n  const [error, setError] = useState(false)\n\n  const addExpense = e => {\n    e.preventDefault()\n\n    if (quantity < 1 || isNaN(quantity) || name.trim() === '') return setError(true)\n\n    const expense = {\n      name,\n      quantity,\n      id: shortid.generate(),\n    }\n\n    setExpense(expense)\n    setAddExpense(true)\n    setName('')\n    setQuantity(0)\n  }\n\n  return (\n    <form onSubmit={addExpense}>\n      <h2>Add your expenses here</h2>\n\n      {error && <Error msg=\"Both fields require to be filled correctly\" />}\n\n      <div className=\"campo\">\n        <label>Expense Name</label>\n        <input\n          type=\"text\"\n          className=\"u-full-width\"\n          placeholder=\"E.g. Bus\"\n          value={name}\n          onChange={e => setName(e.target.value)}\n        />\n      </div>\n      <div className=\"campo\">\n        <label>Expense Quantity</label>\n        <input\n          type=\"text\"\n          className=\"u-full-width\"\n          placeholder=\"E.g. 300\"\n          value={quantity}\n          onChange={e => setQuantity(parseInt(e.target.value, 10))}\n        />\n      </div>\n\n      <input type=\"submit\" className=\"button-primary u-full-width\" value=\"Add\" />\n    </form>\n  )\n}\n\nForm.propTypes = {\n  setExpense: PropTypes.func.isRequired,\n  setAddExpense: PropTypes.func.isRequired,\n}\n\nexport default Form\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction Expense({ expense }) {\n  return (\n    <li className=\"gastos\">\n      <p>\n        {expense.name}\n        <span className=\"gasto\">$ {expense.quantity}</span>\n      </p>\n    </li>\n  )\n}\n\nExpense.propTypes = {\n  expense: PropTypes.object.isRequired,\n}\n\nexport default Expense\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Expense from './Expense'\n\nfunction ExpenseList({ expenses }) {\n  return (\n    <div className=\"gastos-realizados\">\n      {expenses.map(expense => (\n        <Expense key={expense.id} expense={expense} />\n      ))}\n    </div>\n  )\n}\n\nExpenseList.propTypes = {\n  expenses: PropTypes.array.isRequired,\n}\n\nexport default ExpenseList\n","export const reviewBudget = (budget, remaining) => {\n  let style = ''\n\n  if (budget / 4 > remaining) {\n    style = 'alert alert-danger'\n  } else if (budget / 2 > remaining) {\n    style = 'alert alert-warning'\n  } else {\n    style = 'alert alert-success'\n  }\n\n  return style\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { reviewBudget } from '../helper/changeClass'\n\nfunction BudgetControl({ budget, remaining }) {\n  return (\n    <>\n      <div className=\"alert alert-primary\">Budget: ${budget}</div>\n      <div className={reviewBudget(budget, remaining)}>Remaining: $ {remaining}</div>\n    </>\n  )\n}\n\nBudgetControl.propTypes = {\n  budget: PropTypes.number.isRequired,\n  remaining: PropTypes.number.isRequired,\n}\n\nexport default BudgetControl\n","import React, { useState, useEffect } from 'react'\n\nimport Question from './components/Question'\nimport Form from './components/Form'\nimport ExpenseList from './components/ExpenseList'\nimport BudgetControl from './components/BudgetControl'\n\nfunction App() {\n  const [budget, setBudget] = useState(0)\n  const [remaining, setRemaining] = useState(0)\n  const [showQuestion, setShowQuestion] = useState(true)\n  const [expenses, setExpenses] = useState([])\n  const [expense, setExpense] = useState({})\n  const [addExpense, setAddExpense] = useState(false)\n\n  useEffect(() => {\n    if (addExpense) {\n      setExpenses(prevState => [...prevState, expense])\n\n      const remainingBudget = remaining - expense.quantity\n\n      setRemaining(remainingBudget)\n      setAddExpense(false)\n    }\n  }, [expense, addExpense, remaining])\n\n  return (\n    <div className=\"container\">\n      <header>\n        <h1>Weekly Budget</h1>\n        <div className=\"contenido-principal contenido\">\n          {showQuestion ? (\n            <Question\n              setShowQuestion={setShowQuestion}\n              setBudget={setBudget}\n              setRemaining={setRemaining}\n            />\n          ) : (\n            <div className=\"row\">\n              <div className=\"one-half column\">\n                <Form setExpense={setExpense} setAddExpense={setAddExpense} />\n              </div>\n              <div className=\"one-half column\">\n                <ExpenseList expenses={expenses} />\n                <BudgetControl budget={budget} remaining={remaining} />\n              </div>\n            </div>\n          )}\n        </div>\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}